---
title: "main"
format: html
editor: visual
---

## Note :

On veut des exemples de site web

## Idée pour l'interface :

L'objectif est d'accéder rapidement à une offre d'emplois en utilisant des mots clefs

On veut plusieurs pages : - Une qui présente l'application - Une qui permet de faire une recherche avec des mots clefs - Une qui permet de faire des recherches sur base de compétence - Une qui permet de mettre son cv et de créer un matching avec une annonce (sur quel critère on réalise le match ?) - Afficher quelques stats ?

## Create an example of data frame

```{r}

job_data <- data.frame(
  RechercheEffectuée = c("data analyst", "big data", "data scientist", "business intelligence", "data engineer", 
                         "data analyst junior", "machine learning", "data visualization", "data manager", "data architect"),
  IntituléPoste = c("Data Analyst", "Big Data Engineer", "Data Scientist", "Business Intelligence Analyst", "Data Engineer",
                    "Junior Data Analyst", "Machine Learning Engineer", "Data Visualization Expert", "Data Manager", "Data Architect"),
  DescriptionPoste = c("Analyse de données et reporting", "Traitement de grandes quantités de données", "Modélisation prédictive et statistiques", "Analyse de données pour insights business", "Conception et maintenance d'infrastructures de données",
                       "Analyse de données, support aux équipes senior", "Développement d'algorithmes d'apprentissage automatique", "Création de visualisations de données complexes", "Gestion des opérations de données", "Architecture et conception de solutions de données"),
  FourchetteSalaire = c("35k-45k", "50k-70k", "55k-75k", "40k-60k", "50k-70k", 
                        "30k-40k", "60k-80k", "45k-55k", "50k-65k", "70k-90k"),
  Entreprise = c("DataCorp", "BigDataTech", "PredictiveInsights", "BI Solutions", "DataPipeline Inc", 
                 "Analytica", "ML Innovations", "VisuData", "DataManager Group", "ArchitectData"),
  SecteurEntreprise = c("Analyse de données", "Technologie", "Finance", "Consulting", "Informatique", 
                        "Marketing", "Intelligence Artificielle", "Design", "Gestion de données", "Informatique"),
  CompétencesDemandées = c("SQL, Python", "Hadoop, Spark", "Python, R, SQL", "Tableau, SQL", "Python, ETL", 
                           "Excel, SQL", "Python, TensorFlow", "Tableau, D3.js", "Gestion de base de données", "Big Data, Cloud Computing"),
  LieuExercice = c("Paris", "Lyon", "Marseille", "Toulouse", "Nice", 
                   "Nantes", "Strasbourg", "Bordeaux", "Lille", "Rennes"),
  TypeEmploi = c("CDI", "CDI", "CDI", "CDI", "CDI", 
                 "CDD", "CDI", "CDI", "CDI", "CDI"),
  DuréeEmploi = c(NA, NA, NA, NA, NA, 
                  "12 mois", NA, NA, NA, NA),
  SiteSourceAnnonce = c("indeed.com", "monster.fr", "apec.fr", "linkedin.com", "glassdoor.fr", 
                        "cadremploi.fr", "aijobs.com", "vizjobs.com", "datajobs.fr", "techarchjobs.com"),
  LienAnnonce = c("link1", "link2", "link3", "link4", "link5", 
                  "link6", "link7", "link8", "link9", "link10"),
  stringsAsFactors = FALSE
)


# Création de nouvelles entrées pour le DataFrame
nouvelles_entrees <- data.frame(
  RechercheEffectuée = c("développeur web", "spécialiste en cybersécurité", "analyste cloud", "développeur mobile", "consultant IT",
                         "analyste de données marketing", "expert en IA", "spécialiste en visualisation de données", "chef de projet IT", "architecte de solutions cloud"),
  IntituléPoste = c("Développeur Web Full Stack", "Cybersecurity Specialist", "Cloud Analyst", "Mobile App Developer", "IT Consultant",
                    "Marketing Data Analyst", "AI Specialist", "Data Visualization Specialist", "IT Project Manager", "Cloud Solutions Architect"),
  DescriptionPoste = c("Développement de sites web et d'applications", "Sécurisation des réseaux et des systèmes informatiques", "Gestion et optimisation des infrastructures cloud", "Développement d'applications mobiles sur iOS et Android", "Conseil en technologies de l'information",
                       "Analyse des données de marketing et de vente", "Développement de solutions basées sur l'intelligence artificielle", "Création de tableaux de bord et de visualisations de données", "Gestion de projets informatiques", "Conception et mise en œuvre d'architectures cloud"),
  FourchetteSalaire = c("40k-60k", "60k-80k", "50k-70k", "45k-65k", "55k-75k",
                        "40k-60k", "70k-90k", "50k-70k", "60k-85k", "80k-100k"),
  Entreprise = c("WebTech", "SecureNet", "CloudServices", "AppDevCo", "ITConsulting",
                 "MarketAnalytics", "AIInnovations", "VisualTech", "ProjectSolutions", "CloudArchitects"),
  SecteurEntreprise = c("Développement web", "Cybersécurité", "Cloud Computing", "Développement mobile", "Consulting IT",
                        "Marketing", "Intelligence Artificielle", "Visualisation de données", "Gestion de projet", "Cloud Computing"),
  CompétencesDemandées = c("JavaScript, React", "Sécurité informatique, Cryptographie", "AWS, Azure", "Swift, Kotlin", "Gestion de projet, ITIL",
                           "Google Analytics, SQL", "Python, Deep Learning", "Tableau, Power BI", "Gestion de projet, Agile", "AWS, Architecture cloud"),
  LieuExercice = c("Lyon", "Marseille", "Paris", "Toulouse", "Nantes",
                   "Strasbourg", "Bordeaux", "Lille", "Rennes", "Nice"),
  TypeEmploi = c("CDI", "CDI", "CDI", "CDI", "CDI",
                 "CDD", "CDI", "CDI", "CDI", "CDI"),
  DuréeEmploi = c(NA, NA, NA, NA, NA,
                  "18 mois", NA, NA, NA, NA),
  SiteSourceAnnonce = c("jobtech.fr", "cyberjobs.com", "cloudemploi.fr", "mobiledevjobs.com", "itconsultingjobs.fr",
                        "marketingjobs.com", "aijobs.com", "vizjobs.com", "projectmanagementjobs.com", "cloudcareers.com"),
  LienAnnonce = c("link11", "link12", "link13", "link14", "link15",
                  "link16", "link17", "link18", "link19", "link20"),
  stringsAsFactors = FALSE
)

# Fusion des données existantes avec les nouvelles entrées
job_data <- rbind(job_data, nouvelles_entrees)

```

```{r}
write.csv2(job_data, file = "data/job_data.csv")
```

```{r}
library(pdftools)
library(tesseract)
library(stringr)
```



```{r}
# Cela dépend de la façon dont les compétences sont présentées dans le CV
competences <- str_extract_all(texte_cv, "data")

# Afficher les compétences extraites
print(competences)

```
```{r}
# Extraction du texte du CV (remplacer par le chemin de votre fichier)
texte_cv <- tolower(pdf_ocr_text("data/CV Yoann.pdf"))

# Exemple d'extraction de compétences du CV (ajuster selon le format du CV)
competences_cv <- str_extract_all(texte_cv, "\\b([A-Za-z]+)\\b")[[1]]
competences_cv <- unique(competences_cv)

# Fonction pour vérifier si le CV correspond aux compétences demandées
verifier_competences <- function(competences_offre, competences_cv) {
  competences_offre <- str_to_lower(competences_offre)
  competences_offre_liste <- unlist(str_split(competences_offre, ",\\s*"))
  any(competences_offre_liste %in% competences_cv)
}

# Appliquer la fonction à chaque offre d'emploi
job_data$CorrespondanceCV <- sapply(job_data$CompétencesDemandées, function(x) verifier_competences(x, competences_cv))

# Afficher les offres correspondantes
offres_correspondantes <- job_data[job_data$CorrespondanceCV, ]

```




```{r}
test <- read.csv("data/output_bdd.csv")
```


```{r}
test <- fread("StockUniteLegaleHistorique_utf8.csv")
```
```{r}
test[denominationUniteLegale == "BNP PARIBAS",.(dateDebut,siren,denominationUniteLegale,activitePrincipaleUniteLegale)]
```


```{r}
test[denominationUniteLegale == "BNP PARIBAS",.(dateDebut)]
```

```{r}
library(data.table)

# Convertir votre data frame en data.table si ce n'est pas déjà fait
setDT(test)

# Taille de chaque lot (chunk)
chunk_size <- 1e6 

# Nombre total de lignes
total_rows <- nrow(test)

# Créer un data.table vide pour stocker les résultats
df_2022 <- data.table()

# Traitement par lots
for (start_row in seq(1, total_rows, by = chunk_size)) {
    # Lire le lot actuel
    end_row <- min(start_row + chunk_size - 1, total_rows)
    chunk <- test[start_row:end_row, ]

    # Filtrer pour l'année 2022
    filtered_chunk <- chunk[format(as.IDate(dateDebut), "%Y") == "2022"]

    # Ajouter les résultats filtrés au data.table final
    df_2022 <- rbindlist(list(df_2022, filtered_chunk), use.names = TRUE)
}

# Maintenant, df_2022 contient toutes les lignes de l'année 2022

```

```{r}
df_2022[denominationUniteLegale == "SQUARE",.(dateDebut,siren,denominationUniteLegale,activitePrincipaleUniteLegale)]
```
```{r}
write.csv2(df_2022,"siren2022.csv")
```



```{r}

```

```{r}
data[denominationUniteLegale == "HAGER",.(dateDebut,siren,denominationUniteLegale,activitePrincipaleUniteLegale)]
```


```{r}
library(stringdist)
library(data.table)
```

```{r}
bdd <- fread("output_bdd.csv", header = T)
data <- fread("siren2022.csv")
```



```{r}
noms_incorrects <- bdd[,Entreprise]# Remplacez avec vos données
noms_corrects <- unique(data[,denominationUniteLegale]) # Remplacez avec vos données



noms_corriges <- sapply(noms_incorrects, function(nom_incorrect) {
    # Filtrage préliminaire - par exemple, prendre les noms corrects dont la longueur est proche
    longueur_nom_incorrect <- nchar(nom_incorrect)
    candidats <- noms_corrects[abs(nchar(noms_corrects) - longueur_nom_incorrect) <= 3]

    # Appliquer la distance de Levenshtein aux candidats
    if(length(candidats) > 0) {
        distances <- stringdist(nom_incorrect, candidats, method = "lv")
        candidat_choisi <- candidats[which.min(distances)]
    } else {
        candidat_choisi <- NA
    }

    return(candidat_choisi)
})



```

```{r}
bdd$EntrepriseCor <- noms_corriges
```


```{r}
bdd[,.(Entreprise,EntrepriseCor)]
```


### Deal with full csv :

```{r}
library(data.table)
```


```{r}
data <- fread("data/full_data.csv")
hello <- fread("data/hellowork_data.csv")
wttj <- fread("data/wttj_data.csv")
indeed <- fread("data/indeed_data.csv")

job_data <- fread("data/job_data.csv",header = T)
```


```{r}
data
```



```{r}
cat("Job Data colnames \n")
colnames(job_data)

cat("Data colnames \n")
colnames(data)
```

```{r}
data
```







